-3, 4, 5, 6, 7, 8, +8, -9, -10, !2, !!2, ~2, 2+3, 2+3+4, 5+6-3-2, 2 + -3;
4 * 5, 4 * 3 * 2, 4 / 2, 4 / 2 / 2, 4 % 3;
4 + 3 * 5; 4 + 20 * 3 / 5; 4 + 3 * 4 + 5 * 8 + 2 * 2;
4 = 3; 1 = 2 = 3 = 4 = 5 + 6;
4 += 3; 4 += 5 = 6; 4 -= 6 * 8; 4 -= 6 += 4 = 7 * 3;
(4), (4 + 5 * 3), ((4 + 5 * 3) + 8) / 2;
4 *= 3 + 5 * 8;
4 /= 2 + 2;
4 %= 2;
4 ? 5 : 3;
4 + 3 ? 5 + 5 : 3 + 3;
4 + 3 * 5 ? 9 ? 1 : 2 : 2 * 5;
3 || 1;
1 || 2 + 3 || 3;
1 && 2;
1 && 2 || 3 && 4 || 5 * 8;
1|3; 1+4|3+3;
1^3; 1^3+4;
1&3; 3&1+2;
4 &= 3 + 4;
4 ^= 1 * 2;
4 |= 3 + 4;
3 == 4; 2 == 3 == 4; 2 * 2 == 4 == 8/2;
3 != 4;
3 < 4; 3 > 2; 3 <= 5; 6 >= 2; 3*3 < 8+8;
3 <<= 4 * 4; 3 >>= 4 + 4;
3 << 4; 1 >> 2; 3 << 2*2; 4 >> 4/2;
--3; ++4; --(3*5), 4; ++(3+8*2);
*4; *4*4; *4*6+2; *4 * *6; **4; **4 * ***6 + 3 * 8;
&4 * 3; &4 & 2; &4 & &3; 4++; 5--; (4*5)++; (2*3+4)--;
4 . 5; 4 . 2 . 4; 2 -> 4; 2 -> 3 -> 4; 2 . 3 -> 4;
4[1]; 4[5*8+3]; (3*5+8*2)[2*3+4]; 4[5][6][7][8]; (4[5*6]) + 3[7];
4(5,3,2,1); 4(); (4*3 + 5*8)(1,2*3+5,3*(2+4),4);
identifier; _identifier; _id123; _id1 + _id2 * _idmult1; a = 5; b = (a * 5) + a;
1.0, 2.2, -3.5, 3.3333333, 4e0, 0.4e1, 0.4e+1, 40e-1;
10, 0x10, 0b10, 010; 0, 00; 1u; 1l; 1ll; 1.0; 1.0f; 1.0d; 1.0l;
2; 123; 123'456; 123'456'78.12'34'567'89;
'a', 'b', '0', '\\', '\n', '\r', '\t', '\b', '\a', '\0', '\000', '\1', '\377', '\x01', '\xAA', '\xff';
'abcd', '\0\0\0\0', '\x10\x20\x30\x40\x50', 'this is a really long char constant';
L'w'; u'w'; U'w'; u8'w'; L'wah!'; u'unicode'; U'Unicode too!';
L'Unicode → and ➤ string!'; u'Boxed ■■■ in'; U'Boxed ■■■ in'; U'Emoji too 😀😄😁'; u'Emoji too 😀😄😁'; u8'Emoji too ■■■ 😀😄😁';
"Hello world"; L"Hello world"; u8"Hello world";
"String " "concatenation"; "Multiple " "string " "concat" "enation";
L 'Unicode'; L "Unicode"; L      "Unicode"; u8         "Unicode";
H"<<_EOF
Hello
_EOF"; H"<<TESTING123
Hello world.
Multiple lines.
TESTING123"; LH"<<Fart
One line
Two line
fart, should not trigger
FART, should not trigger
 Fart, should not trigger
Fart, should not trigger. The next line will not either.
Fart
Okay, next will trigger.
Fart";
"Multiple" "string " H"<<CAT
concatenation but now
across multiple
CAT" " lines too";
HD"<<DOS
MS-DOS and Windows line encodings too.
CR LF encoding.
DOS";
HM"<<MAC
Classic Macintosh OS style line encodings.
CR encoding.
MAC";
'\077', '\o{77}', '\x0f', '\x{f}', '\u00A0', '\u{A0}';
;;;
{ 4; 3; 3,4; }; { 4; "hello"; 5 * 3 + 2; }; { 4; { 5, 3, 8*4; }; 44; }; { 4; { 1, 2; 3; 4; }; }; { 4; 6; { 2; 5; 7; { 6; { 2, 3, 4; }; }; }; };
{ 4; 3; 3,4; }  { 4; "hello"; 5 * 3 + 2; }  { 4; { 5, 3, 8*4; }  44; }  { 4; { 1, 2; 3; 4; }  }  { 4; 6; { 2; 5; 7; { 6; { 2, 3, 4; }  }  }  }

{
	x = { 4, 3, 4 };
	x = { 4, 3, {8, 8*8, 8*8*8, 8*8*8*8}, 16 };
	x = { 1, 2, 3 }, { 4, 5, 6 };
	x = { 1, 2, 3 }, y = { 4, 5, 6};
}

a b c d e f = 40;

int var1 = 45;
signed int var2 = 123;
signed long int var3 = 456l;
signed long long int var4 = 789ll;

int func1();
int func1(void);
int func1(int x,char y,float f);
signed long long int func1(signed long long x,unsigned long long y);

int func1() {
	return(5);
};

int func1(int x,int y) {
	return(x*x + y);
};

signed long long int func1(signed long long int x,float y) {
	return(x*x*x + y);
};

int func1(int x,int y) {
	return (x + y);
}

signed long long int func1(signed long long int x,float y) {
	return(x*x*x + y);
}

int func1() {
	return 5;
};

int func1(int x,int y) {
	return x*x + y;
};

signed long long int func1(signed long long int x,float y) {
	return x*x*x + y;
};

int func1(int x,int y) {
	return x + y;
}

signed long long int func1(signed long long int x,float y) {
	return x*x*x + y;
}

void func1(void) {
	return;
}

int func1(int x,int y) {
	int z = func2(x,y,13);
	z += func3(y,x^y);
	return z ^ 1;
}

// C++ style comment. This should be ignored to end of line.
// Even if another // is in the line, ignored to end of line.
int func1(int x/*input code*/) {
	return x;/*return here /* okay? */ */
	/*/*/*/*This should be ignored*/ even */ if */ nested */
}

int func1(int x) {
	int x = /* multiple line comments,
	to describe something,
	are perfectly fine.

	Go ahead,

	Blather on*/ { 4, 5, 6 };
	return x[0];
}

int func1(float z) {
	int x = {z,z*2,z*3.14,z*4,z*5,z*6,z*7,z*8,z*9.99}; /* C99 syntax */
	int y = &x;
	return x[5];
}

int func1(float x) {
	return (int)x;
}

int func1(float x) {
	return (signed long int)x+(signed long int)(~x);
}

int func1(int x) {
	int x = (long){1*x,2*x,(long long)(3*x),4*x};
	return (int)((float)x * 1.23);
}

int func1(int x) {
	return (int)floatmul1(x,1.245);
}

int func1(float x) {
	return int(x); /* C++ style typecast */
}

int func1(float x) {
	return (signed long int)(x); /* C++ style typecast */
}

int func1(int x) {
	int z = 1;

again:	z++;
	goto again;
}

int func1(int x) {
	return x::y::z::a::b::c;
}

int func1(int x) {
	if (x == 3)
		return x*x;

	return x*3;
}

int func1(int x) {
	if (x == 3)
		return x*x;
	else
		return x*3;
}

int func1(int x) {
	if (x == 3)
		return x*x;
	else if (x == 5)
		return x*x*2;
	else
		return x*3;
}

int func1(int x) {
	if (x == 3)
		return x*x;
	else if (x == 5)
		return x*x*2;
	else if (x == 7)
		{ x += 7; return x*x*3; }
	else
		return x*3;
}

int func1(int x) {
	int y = x ^ 1;

	switch (x) {
		y++; /* should be ignored */
		case 1: y ^= 3; break;
		case 2: y ^= 2; /* fall through */
		case 3: y ^= 4; break;
		default: y |= 8; break;
	}

	return y;
}

int func1(int x) {
	int y = x ^ 1;

	switch (x) {
		y++; /* should be ignored */
		y += 2; /* should be ignored */
		case 1: y ^= 3; break;
		case 2: y ^= 2;
			switch (x&3) {
				case 1: y |= 32; break;
				case 3: y += 48; break;
			}
			break;
		case 3: y ^= 4; break;
		default: y |= 8; break;
	}

	while (x > 0) x--;

	while (x > 0) { x = (x << 1); y++; }

	while (x > 0) {
		x = (x << 1);
		if (x == 0x80) break;
		y++;
	}

	do {
		x = (x << 1) + 1; y += 2;
	} while (x < 0x100);

	do x = (x << 1) + 1; while (x < 0x200); /* not often used, but you can do statement without curly braces */

	return y;
}

