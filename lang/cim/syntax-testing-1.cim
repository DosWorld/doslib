+ - ++ -- ; = == != ! ~ & && | || ^ |= ^= &= += -= * / \ *= /= % %= ? : < << <<= <= <=> > >> >>= >= . -> .* ->* [ ] { } ( ) :: 0 1 2 3 4 5 6 7 8 9 00 01 02 03 04 05 06 07 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA 0xB 0xC 0xD 0xE 0xF 0b0 0b1 1u 2u 3u 1l 2l 3l 1ll 3ll 5ll 10 11 12 13 14 15 100 101 102 1000 1001 1009 10000 10009 1000000000000 1234567890123456789 1111111111111111111111111111111111111111 0b0 0b000 0b1010 0b0101 0777 1234'5678'9012 0xFFFF'FFFF'FFFF'FFFF 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 10.5 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.00001 0.00000000000000000000000000000000000000001 10.0 100000.0 100000000000.0 100000000000000000000000000.0 10000000000000000000000000000000000000000000000000.0 1e0 1e1 1e2 1e3 1e4 1e-1 1e-2 1e-3 1e-4 1.0f 1.0d 1.0l 'a' 'b' 'c' 'd' 'aa' 'ab' 'cd' 'abcd' '\t' '\011' '\x09' "a" "b" "c" "abc" "abcdefg" "long string meant to test reallocation logic to see if it works correctly this string should well exceed 128 bytes to test that logic blah blah blah blah blah blah" identifier _identifier longer_identifier even_very_much_longer_should_exceed_32_chars_to_test_fill_in_code_blah_blah u8"a" u8"b" u8"abcdef" u"a" u"b" u"abcdef" u"longer string blah blah blah overrun the base blah blah" L"a" L"b" L"abcd" L"longer string" L"longer string that will cause realloc to call blah blah blah" u"これからはじめる人や、もういちどはじめる人へ、役立つ情報をお届けします。" U"これからはじめる人や、もういちどはじめる人へ、役立つ情報をお届けします。" u8"これからはじめる人や、もういちどはじめる人へ、役立つ情報をお届けします。" u"😊😘" U"😊😘" u8"😊😘" u'a' U'a' u8'a' u'abcd' U'abcd' u8'abcd' u'す' U'す' u8'す'
1,2,3,4,5,6,7,8,a,b,c,d,e,f,g
\x\y\z
xyz\
abc
,
&= ^= |= <<= >>= *= /= %= += -= = ? :
||
&&
|
^
&
== !=
< <= > >=
<=>
<< >>
+ -
* / %
.* ->*
&a
*a
(type)
! ~
+a -a
++a --a
. ->
a[]
a()
type() type{}
a++ a--
::
#ident ident #ident
alignas alignof auto bool break case char const
constexpr continue default do double else enum extern false float for goto if inline int long
nullptr
register
restrict
return
short
signed
sizeof
static
static_assert
struct
switch
thread_local
true
typedef
typeof
typeof_unqual
union
unsigned
void
volatile
while
_Alignas
_Alignof
_Atomic
_BitInt
_Bool
_Complex
_Decimal128
_Decimal32
_Decimal64
_Generic
_Imaginary
_Noreturn
_Static_assert
_Thread_local
char8_t
char16_t
char32_t
consteval
constinit
namespace
template
typeid
typename
using
wchar_t
#if
#ifdef
#define A
#define B ( 4 )
#define C (4 )
#define D ( 4)
#define E (4)
#define F (x,y)
#define G "hello" "world"
#define X
hello A 4 B 4 C 4 D 4 E 4 F 4 G 4 X
#undef X
#undef X
hello 4 X 4 A
#else
#elif
#elifdef
#ifndef
#include
#error
#warning
#line
#pragma
#if
# if
#  if
#   if
#line
# line
#  line
#   line
#	line
#		line
token#paste
token##paste
__LINE__
__FILE__
__VA_OPT__
__VA_ARGS__
...
"string \
literal"
"string\n\
literal"
int x/* comment */ = 5;
int x/* multiple
   line
   comment */ = 5;
int x/* comment /* with /* nesting */ in */ here */ = 5;
int x = 5;// comment
int x = 5;// another comment
int x = 5;
[ ] [[ ]]
intmax_t
uintmax_t
int8_t
uint8_t
int16_t
uint16_t
int32_t
uint32_t
int64_t
uint64_t
int_least8_t
uint_least8_t
int_least16_t
uint_least16_t
int_least32_t
uint_least32_t
int_least64_t
uint_least64_t
int_fast8_t
uint_fast8_t
int_fast16_t
uint_fast16_t
int_fast32_t
uint_fast32_t
int_fast64_t
uint_fast64_t
intptr_t
uintptr_t
size_t
ssize_t
near
far
huge
__pascal
__watcall
__stdcall
__cdecl
__syscall
__fastcall
__safecall
__thiscall
__vectorcall
__fortran
__attribute__
__declspec
asm
_asm
__asm
__asm__
__volatile__
inline
_inline
__inline
__inline__
asm("mov eax,esi")
asm("l1: jmp far [somewhere] ; comment")
_asm mov eax,esi
__asm mov eax,esi
__asm mov eax,asi __asm mov [somewhere],eax __asm nop
__asm mov eax,esi ; comment __asm mov [somewhere],eax ; another comment __asm nop ; yay
asm("nop");
__asm__("nop");
__asm__ __volatile__("nop");
__asm__ volatile inline goto ("nop");
__asm nop
__asm mov eax,esi
hello;
__asm { nop }; int x;
__asm { mov eax,esi }; int x;
__asm {
	nop
	mov	eax,esi
}
__asm {
	nop
	__asm	nop
	mov	eax,esi
}
__asm {
	nop
	__asm {
		nop
		cli
		sti
	}
	mov	eax,esi
}
__asm {
	nop
	__asm {
		nop
		cli
		__asm {
			sti
			pop	cs
		}
		sti
	}
	mov	eax,esi
}
__asm {
	nop
l1:	nop
l2:	jmp
}
hello;
__asm {
	.386p
	.flat
	nop
	mov	ax,@fardata
}
#define X1 something \
something else
#define X2 something /* C comment
that spans lines */ else
X1;
X2;
Hello;
#define XX X1 X2
XX;
#define X3 (a,b,c) xyz
#define X4(a,b,c) xyz
#define X5(_a123,_b456,___c789) xyz

